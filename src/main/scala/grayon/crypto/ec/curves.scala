/*
 *  crypto 0.0.0
 *--------------------------------------------------------------------*/

package grayson.crypto
package ec

import java.security.spec.ECFieldFp
import java.security.spec.ECParameterSpec
import java.security.spec.ECPoint
import java.security.spec.EllipticCurve

object BrainPoolCurves extends CurveHelpers {
  import ToBigInteger.stringBase16

  // TODO: add the other brainpool curves

  lazy val P512r1 = curve( // format: OFF
    p = "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308" +
        "717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3",
    a = "7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863" +
        "BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA",
    b = "3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117" +
        "A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723",
    x = "81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D009" +
        "8EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822",
    y = "7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F81" +
        "11B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892",
    q = "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308" +
        "70553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069",
    h = 1
  ) // format: ON

}

object NISTCurves extends CurveHelpers {
  import ToBigInteger.stringBase10

  /** P-256 curve from `http://www.nsa.gov/ia/_files/nist-routines.pdf`
    */
  lazy val P256 = curve( // format: OFF
    p = "1157920892103562487626974469494075735300" +
        "86143415290314195533631308867097853951",
    a = "1157920892103562487626974469494075735300" +
        "86143415290314195533631308867097853948",
    b = "4105836372515214212932612978004726840911" +
        "4441015993725554835256314039467401291",
    x = "4843956129390645175905258525279791420276" +
        "2949526041747995844080717082404635286",
    y = "3613425095674979579858512791958788195661" +
        "1106672985015071877198253568414405109",
    q = "1157920892103562487626974469494075735299" +
        "96955224135760342422259061068512044369",
    h = 1 // format: ON
  )

  /** P-384 curve from `http://www.nsa.gov/ia/_files/nist-routines.pdf`
    */
  lazy val P384 = curve( // format: OFF
    p = "39402006196394479212279040100143613805079739270465" +
        "44666794829340424572177149687032904726608825893800" +
        "1861606973112319",
    a = "39402006196394479212279040100143613805079739270465" +
        "44666794829340424572177149687032904726608825893800" +
        "1861606973112316",
    b = "27580193559959705877849011840389048093056905856361" +
        "56852142870730198868924130986086513626076488374510" +
        "7765439761230575",
    x = "26247035095799689268623156744566981891852923491109" +
        "21338781561590092551885473805008902238805397571978" +
        "6650872476732087",
    y = "83257109614890299855467512895201081792878530488613" +
        "15594709205902480503199884419224438643760392947333" +
        "078086511627871",
    q = "39402006196394479212279040100143613805079739270465" +
        "44666794690527962765939911326356939895630815229491" +
        "3554433653942643",
    h = 1 // format: ON
  )

  /** P-521 curve from `http://www.nsa.gov/ia/_files/nist-routines.pdf`
    */
  lazy val P521 = curve( // format: OFF
    p = "68647976601306097149819007990813932172694353001433" +
        "05409394463459185543183397656052122559640661454554" +
        "97729631139148085803712198799971664381257402829111" +
        "5057151",
    a = "68647976601306097149819007990813932172694353001433" +
        "05409394463459185543183397656052122559640661454554" +
        "97729631139148085803712198799971664381257402829111" +
        "5057148",
    b = "10938490380737342745111123907668055699362075989516" +
        "83748994586394495953116150735016013708737573759623" +
        "24859213229670631330943845253159101291214232748847" +
        "8985984",
    x = "26617408020502170632287687167233609607298591687569" +
        "73147706671368418802944996427808491545080627771902" +
        "35209424122506555866215711354557091681416163731589" +
        "5999846",
    y = "37571800257700204635455072244911836035944551347697" +
        "62486694567779615544477440556316691234405012945539" +
        "56214444453728942852258566672919658081012434427757" +
        "8376784",
    q = "68647976601306097149819007990813932172694353001433" +
        "05409394463459185543183397655394245057746333217197" +
        "53296399637136332111386476861244038034037280889270" +
        "7005449",
    h = 1 // format: ON
  )

}

trait CurveHelpers {
  import java.math.BigInteger

  /** I'm lazy, let's implicitly convert our strings right to big integers.
    */
  object ToBigInteger {
    implicit def stringBase10(string: String): BigInteger = BigInt(string).bigInteger
    implicit def stringBase16(string: String): BigInteger = BigInt(string, 16).bigInteger
  }

  /** Curve helper */
  def curve[T <% BigInteger](
    p: T, // curve prime
    a: T, // a = p - 3
    b: T,
    x: T, // point G
    y: T, // point G
    q: T,
    h: Int
  ) = {
    new ECParameterSpec(
      new EllipticCurve(new ECFieldFp(p), a, b),
      new ECPoint(x, y),
      q,
      h
    )
  }
}

object CurveHelpers extends CurveHelpers
